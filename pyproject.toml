[tool.poetry]
name = "ijon"
version = "0.1.0"
description = "PDF Extraction & RAG System with Google Drive Integration"
authors = ["Marcin <marcin@example.com>"]
readme = "README.md"
python = "^3.11"

[tool.poetry.dependencies]
python = "^3.11"

# Core dependencies
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"

# Google Drive integration
google-api-python-client = "^2.111.0"
google-auth-httplib2 = "^0.2.0"
google-auth-oauthlib = "^1.2.0"
PyDrive2 = "^1.19.0"

# PDF processing
PyMuPDF = "^1.23.0"
pdfplumber = "^0.10.0"
pdf2image = "^1.17.0"
pytesseract = "^0.3.10"
Pillow = "^10.2.0"

# NLP and text processing
spacy = "^3.7.0"
nltk = "^3.8.0"

# Vector databases
psycopg2-binary = "^2.9.0"
asyncpg = "^0.29.0"
pgvector = "^0.2.0"
supabase = "^2.3.0"
pinecone-client = "^3.0.0"

# Embeddings and RAG
sentence-transformers = "^2.3.0"
langchain = "^0.1.0"
langchain-community = "^0.0.10"
openai = "^1.10.0"
tiktoken = "^0.5.0"

# MCP server
fastapi = "^0.109.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
websockets = "^12.0"
mcp = "^0.1.0"

# CLI
typer = {extras = ["all"], version = "^0.9.0"}
rich = "^13.7.0"
click = "^8.1.0"

# Agent framework
pydantic-ai = "^0.0.8"

# Graph databases
neo4j = "^5.16.0"
graphiti-core = {version = "^0.2.0", optional = true}

# Async and concurrency
aiofiles = "^23.2.0"
aiohttp = "^3.9.0"
asyncio = "^3.4.3"

# Utilities
httpx = "^0.26.0"
tenacity = "^8.2.0"
tqdm = "^4.66.0"

# Data handling
pandas = "^2.1.0"
numpy = "^1.26.0"
pyarrow = "^15.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^24.1.0"
ruff = "^0.1.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
ipython = "^8.20.0"

# Type stubs
types-requests = "^2.31.0"
types-aiofiles = "^23.2.0"

[tool.poetry.scripts]
ijon = "src.cli:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Use of assert detected
    "S101",
    # Line too long
    "E501",
    # Possible hardcoded password
    "S105", "S106",
    # Avoid specifying long messages outside the exception class
    "TRY003",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "--verbose",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]